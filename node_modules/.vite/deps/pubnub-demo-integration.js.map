{
  "version": 3,
  "sources": ["../../../../../../node_modules/pubnub-demo-integration/dist/InteractiveDemoInterface.js", "../../../../../../node_modules/pubnub-demo-integration/dist/App.js", "dep:pubnub-demo-integration"],
  "sourcesContent": ["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports[\"default\"] = void 0;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n * Indicate to the demo framework that the specified action has been completed\n * @param action The feature to be set\n * @param blockDuplicateCalls Sets a sessionStorage flag so the message is only sent once (saves hammering the keys).  Only works client-side.\n * @param debug Extra debug info\n * @param windowLocation When called from the server, you can pass the page URL in so this module can take care of parsing the identifier\n * @param fetchClient When called from the server, you can pass in an instance of node-fetch which will be used instead of the client fetch APIs\n */\nvar actionCompleted = function(args) {\n    const pub = 'pub-c-c8d024f7-d239-47c3-9a7b-002f346c1849';\n    const sub = 'sub-c-95fe09e0-64bb-4087-ab39-7b14659aab47';\n    let identifier = \"\";\n    let action = args.action;\n    let blockDuplicateCalls = args.blockDuplicateCalls;\n    let debug = args.debug;\n    let windowLocation = args.windowLocation;\n\n    if (typeof action === 'undefined')\n    {\n        console.log('Interactive Demo Integration Error: No action provided');        \n        return;\n    }\n\n    if (typeof blockDuplicateCalls === 'undefined')\n    {\n        blockDuplicateCalls = false;\n    }\n\n    if (typeof debug === 'undefined')\n    {\n        debug = false;\n    }\n\n    //  If invoked from client-side, you can omit the window location\n    if (typeof windowLocation === 'undefined')\n        windowLocation = window.location.href;\n\n    var fetchClient = null;\n    if (typeof fetch === 'undefined')\n        fetchClient = args.fetchClient;\n    else\n        fetchClient = fetch;\n\n    let queryString = new URL(windowLocation).search.substring(1);\n    const urlParamsArray = queryString.split('&');\n    for (let i = 0; i < urlParamsArray.length; i++) {\n        if (urlParamsArray[i].startsWith('identifier') && urlParamsArray[i].includes('=')) {\n            let identifierPair = urlParamsArray[i].split('=');\n            identifier = identifierPair[1];\n        }\n    }\n    if (identifier === \"\") {\n        if (debug)\n        {\n            console.log('Interactive Demo Integration Error: Failed to detect identifier in URL query string');\n        }\n        return;\n    }\n    if (blockDuplicateCalls) {\n        //  This option only works if the sessionStorage object is defined (client-side only)\n        try {\n            if (!(typeof sessionStorage === 'undefined')) {\n                //  Read the id from session storage and only send the message if the message was not previous sent\n                let sessionStorageKey = \"Demo_\" + identifier + action;\n                let storedId = sessionStorage.getItem(sessionStorageKey);\n                if (storedId == null) {\n                    if (debug)\n                        console.log('Setting session key to avoid duplicate future messages being sent. Action: ' + action + '. Identifier: ' + identifier);\n                        sessionStorage.setItem(sessionStorageKey, \"set\");\n                }\n                else {\n                    //  This is a duplicate message, do not send it\n                    if (debug)\n                        console.log('Message blocked as it is a duplicate. Action: ' + action + '. Identifier: ' + identifier);\n                    return;\n                }\n            }                   \n        }\n        catch (err) {} //  Session storage is not available\n\n    }\n\n    if (debug)\n    {\n        console.log('Sending message. Action: ' + action + '. Identifier: ' + identifier);\n    }\n    \n    const url = `https://ps.pndsn.com/publish/${pub}/${sub}/0/demo/myCallback/${encodeURIComponent(JSON.stringify({ id: identifier, feature: action }))}?store=0&uuid=${identifier}`;\n    fetchClient(url)\n        .then(response => {\n        if (!response.ok) {\n            throw new Error(response.status + ' ' + response.statusText);\n        }\n        return response;\n    })\n        .then(data => {\n        //  Successfully set demo action with demo server\n        //console.log(\"Guided Demo Integration success\", url, data)\n    })\n        .catch(e => {\n        console.log('Interactive Demo Integration: ', e);\n    });\n    return;\n}\nexports.actionCompleted = actionCompleted;\n\n//  Credit: https://stackoverflow.com/questions/18862256/how-to-detect-emoji-using-javascript\n/**\n * Test for Emoji in a string\n * @param testString String to search for emoji\n * @param debug Extra debug info\n * @returns Whether or not the test string contains emoji\n */\nfunction containsEmoji(args) {\n    let testString = args.testString;\n    let debug = args.debug;\n    var hasEmoji = /\\p{Extended_Pictographic}/u.test(testString);\n    if (debug)\n        console.log('Has Emoji?: ' + hasEmoji);\n    return hasEmoji;\n}\nexports.containsEmoji = containsEmoji;\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"actionCompleted\", {\n    enumerable: true,\n    get: function get() {\n      return _InteractiveDemoInterface[\"actionCompleted\"];\n    }\n  });\n  Object.defineProperty(exports, \"containsEmoji\", {\n    enumerable: true,\n    get: function get() {\n      return _InteractiveDemoInterface[\"containsEmoji\"];\n    }\n  });\n    \nvar _InteractiveDemoInterface = _interopRequireDefault(require(\"./InteractiveDemoInterface\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }", "export default require(\"../../../node_modules/pubnub-demo-integration/dist/App.js\");"],
  "mappings": "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",
  "names": []
}
