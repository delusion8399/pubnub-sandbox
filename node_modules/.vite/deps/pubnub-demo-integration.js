import {
  __commonJS
} from "./chunk-TWLJ45QX.js";

// ../../../node_modules/pubnub-demo-integration/dist/InteractiveDemoInterface.js
var require_InteractiveDemoInterface = __commonJS({
  "../../../node_modules/pubnub-demo-integration/dist/InteractiveDemoInterface.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports["default"] = void 0;
    var actionCompleted = function(args) {
      const pub = "pub-c-c8d024f7-d239-47c3-9a7b-002f346c1849";
      const sub = "sub-c-95fe09e0-64bb-4087-ab39-7b14659aab47";
      let identifier = "";
      let action = args.action;
      let blockDuplicateCalls = args.blockDuplicateCalls;
      let debug = args.debug;
      let windowLocation = args.windowLocation;
      if (typeof action === "undefined") {
        console.log("Interactive Demo Integration Error: No action provided");
        return;
      }
      if (typeof blockDuplicateCalls === "undefined") {
        blockDuplicateCalls = false;
      }
      if (typeof debug === "undefined") {
        debug = false;
      }
      if (typeof windowLocation === "undefined")
        windowLocation = window.location.href;
      var fetchClient = null;
      if (typeof fetch === "undefined")
        fetchClient = args.fetchClient;
      else
        fetchClient = fetch;
      let queryString = new URL(windowLocation).search.substring(1);
      const urlParamsArray = queryString.split("&");
      for (let i = 0; i < urlParamsArray.length; i++) {
        if (urlParamsArray[i].startsWith("identifier") && urlParamsArray[i].includes("=")) {
          let identifierPair = urlParamsArray[i].split("=");
          identifier = identifierPair[1];
        }
      }
      if (identifier === "") {
        if (debug) {
          console.log("Interactive Demo Integration Error: Failed to detect identifier in URL query string");
        }
        return;
      }
      if (blockDuplicateCalls) {
        try {
          if (!(typeof sessionStorage === "undefined")) {
            let sessionStorageKey = "Demo_" + identifier + action;
            let storedId = sessionStorage.getItem(sessionStorageKey);
            if (storedId == null) {
              if (debug)
                console.log("Setting session key to avoid duplicate future messages being sent. Action: " + action + ". Identifier: " + identifier);
              sessionStorage.setItem(sessionStorageKey, "set");
            } else {
              if (debug)
                console.log("Message blocked as it is a duplicate. Action: " + action + ". Identifier: " + identifier);
              return;
            }
          }
        } catch (err) {
        }
      }
      if (debug) {
        console.log("Sending message. Action: " + action + ". Identifier: " + identifier);
      }
      const url = `https://ps.pndsn.com/publish/${pub}/${sub}/0/demo/myCallback/${encodeURIComponent(JSON.stringify({ id: identifier, feature: action }))}?store=0&uuid=${identifier}`;
      fetchClient(url).then((response) => {
        if (!response.ok) {
          throw new Error(response.status + " " + response.statusText);
        }
        return response;
      }).then((data) => {
      }).catch((e) => {
        console.log("Interactive Demo Integration: ", e);
      });
      return;
    };
    exports.actionCompleted = actionCompleted;
    function containsEmoji(args) {
      let testString = args.testString;
      let debug = args.debug;
      var hasEmoji = /\p{Extended_Pictographic}/u.test(testString);
      if (debug)
        console.log("Has Emoji?: " + hasEmoji);
      return hasEmoji;
    }
    exports.containsEmoji = containsEmoji;
  }
});

// ../../../node_modules/pubnub-demo-integration/dist/App.js
var require_App = __commonJS({
  "../../../node_modules/pubnub-demo-integration/dist/App.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "actionCompleted", {
      enumerable: true,
      get: function get() {
        return _InteractiveDemoInterface["actionCompleted"];
      }
    });
    Object.defineProperty(exports, "containsEmoji", {
      enumerable: true,
      get: function get() {
        return _InteractiveDemoInterface["containsEmoji"];
      }
    });
    var _InteractiveDemoInterface = _interopRequireDefault(require_InteractiveDemoInterface());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
  }
});

// dep:pubnub-demo-integration
var pubnub_demo_integration_default = require_App();
export {
  pubnub_demo_integration_default as default
};
//# sourceMappingURL=pubnub-demo-integration.js.map
